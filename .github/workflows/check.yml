name: Check code

on:
  pull_request:
    types: [ opened, synchronize, reopened, edited ]
  push:
    branches: [ master ]
  schedule:
    - cron: 0 0 * * 1,4

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre compile the project, but without secrets.
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure tests checkbox is checked
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || "";
            if (!body.includes('- [x] Run Android tests')) {
              core.setFailed('The "Run Android tests" box must be checked in the PR description.');
            }

      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin

      - name: Cache Gradle wrapper and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
            ~/.gradle/daemon
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties', '**/*.gradle*', '**/gradle-wrapper.properties', '**/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: true

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Compile app without generating secrets
      - name: Compile common sources
        run: ./gradlew --build-cache compileDebugKotlinAndroid compileDebugJavaWithJavac

      # Upload the partially compiled files
      - name: Upload compiled outputs
        uses: actions/upload-artifact@v4
        with:
          name: compiled-output-base
          path: composeApp/build/
          retention-days: 1

  # Generate the matrix for parallel test execution
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix_json: ${{ steps.set-matrix.outputs.matrix_json }}
      num_processes: ${{ steps.set-num-processes.outputs.num_processes }}
    steps:
      - id: set-num-processes
        run: |
          echo "num_processes=8" >> $GITHUB_OUTPUT

      - id: set-matrix
        run: |
          N=${{ steps.set-num-processes.outputs.num_processes }}
          matrix_json=$(seq 0 $((N - 1)) | paste -sd, -)
          matrix_json="[$matrix_json]"
          echo "matrix_json=$matrix_json" >> $GITHUB_OUTPUT

  # Run Android tests in parallel using the generated matrix
  android-tests:
    needs: [generate-matrix, compile]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard_index: ${{ fromJSON(needs.generate-matrix.outputs.matrix_json) }}
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Update secrets with the specific TEST_USER_MAIL for this shard
      - name: Update local.properties for this shard
        run: |
          chmod +x .github/scripts/update_properties.sh
          .github/scripts/update_properties.sh
        env:
          SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}
          TEST_USER_MAIL: "testuser${{matrix.shard_index}}@axl.com"
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      # Download pre-compiled base outputs
      - name: Download compiled outputs
        uses: actions/download-artifact@v4
        with:
          name: compiled-output-base
          path: ./composeApp/build/

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/daemon
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-deps-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-deps-

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-35-pixel-7-pro

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: false

      # Create AVD if needed
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 35
          target: default
          arch: x86_64
          profile: pixel_7_pro
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      # Run tests with the specific configuration
      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        env:
          NUM_PROCESSES: ${{ needs.generate-matrix.outputs.num_processes }}
        with:
          api-level: 35
          target: default
          arch: x86_64
          profile: pixel_7_pro
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck -PshardIndex=${{ matrix.shard_index }} -PnumShards=$NUM_PROCESSES

      # Process coverage data
      - name: Rename coverage report
        run: |
          mkdir -p composeApp/build/outputs/code_coverage/${{ matrix.shard_index }}/
          find composeApp/build/outputs/code_coverage/ -name "*.ec" -exec cp {} composeApp/build/outputs/code_coverage/${{ matrix.shard_index }}/ \;

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.shard_index }}
          path: composeApp/build/outputs/code_coverage/
          retention-days: 1

  # Generate the coverage report using JaCoCo
  sonar-analysis:
    name: Sonar analysis
    runs-on: ubuntu-latest
    needs: [android-tests]
    steps:
      - uses: actions/checkout@v4

      # Download pre-compiled base outputs
      - name: Download compiled outputs
        uses: actions/download-artifact@v4
        with:
          name: compiled-output-base
          path: ./composeApp/build/

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-report-*
          path: composeApp/build/outputs/code_coverage/

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Generate JaCoCo XML reports
        run: |
          ./gradlew jacocoAndroidTestReport

      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Analyze with coverage
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [[ "${GITHUB_REF_NAME}" == "master" ]]; then
            ./gradlew sonar --no-configuration-cache --no-parallel --no-daemon \
              -Dsonar.branch.name=master
          else
            ./gradlew sonar --no-configuration-cache --no-parallel --no-daemon
          fi

  # Check code formatting using ktfmt
  format-check:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure tests checkbox is checked
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || "";
            if (!body.includes('- [x] Check code formatting')) {
              core.setFailed('The "Check code formatting" box must be checked in the PR description.');
            }

      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Run formatter check
        run: ./gradlew ktfmtCheck
